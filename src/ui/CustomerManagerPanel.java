/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.CustomerManager;
import util.CustomerManagerDBC;

/**
 *
 * @author varun
 */
public class CustomerManagerPanel extends javax.swing.JPanel {

    private ArrayList<CustomerManager> orderlist; 
    private ArrayList <CustomerManager> requestlist;
    private CustomerManager selectedOrderDetails;
    private JPanel bottomPanel;
    private CustomerManager orderUpdate;
    private CustomerManager newCustomerManager;
    private CustomerManager selectedRequest;
    String addressForUpdate="";
    int orderid=0;
    /**
     * Creates new form CustomerManager
   **/
  
    public CustomerManagerPanel(JPanel bottomPanel) {
        initComponents();
        populateTable();
        this.bottomPanel=bottomPanel;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        Approve = new javax.swing.JButton();
        requestCancellation = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        orderTable = new javax.swing.JScrollPane();
        order_table = new javax.swing.JTable();
        orderTableButton = new javax.swing.JButton();
        requestTableButton = new javax.swing.JButton();
        requestTable = new javax.swing.JScrollPane();
        requests_table = new javax.swing.JTable();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Shipped", "Pending Review", "Awaiting Cancellation", "Delievered" }));

        Approve.setText("approve");
        Approve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApproveActionPerformed(evt);
            }
        });

        requestCancellation.setText("Request Cancellation");
        requestCancellation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestCancellationActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        order_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Order Id", "Order Creator Id", "Product Name", "Delivery Address", "Order Placed Date", "Delivery Agent Id", "Order Status", "Notes"
            }
        ));
        orderTable.setViewportView(order_table);
        if (order_table.getColumnModel().getColumnCount() > 0) {
            order_table.getColumnModel().getColumn(4).setHeaderValue("Order Placed Date");
            order_table.getColumnModel().getColumn(5).setHeaderValue("Delivery Agent Id");
            order_table.getColumnModel().getColumn(6).setHeaderValue("Order Status");
            order_table.getColumnModel().getColumn(7).setHeaderValue("Notes");
        }

        orderTableButton.setText("Switch to Requests Table");
        orderTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTableButtonActionPerformed(evt);
            }
        });

        requestTableButton.setText("Switch to Order Table");
        requestTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderTableActionPerformed(evt);
            }
        });

        requests_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order Id", "Old Address", "New Address", "Comments"
            }
        ));
        requestTable.setViewportView(requests_table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(requestTableButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(orderTableButton))
                    .addComponent(orderTable, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Approve)
                                .addGap(45, 45, 45))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(requestTable, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton)
                                .addGap(38, 38, 38))
                            .addComponent(requestCancellation, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderTableButton)
                    .addComponent(requestTableButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderTable, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Approve)
                        .addGap(116, 116, 116)
                        .addComponent(requestCancellation)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveButton)
                            .addComponent(requestTable, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestCancellationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestCancellationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_requestCancellationActionPerformed

    private void ApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApproveActionPerformed
       // TODO add your handling code here:
       int selectedIndex = requests_table.getSelectedRow();
        if(selectedIndex == -1) {
            JOptionPane.showMessageDialog(this,"Please select a request to update", "Cannot update request", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        selectedRequest = requestlist.get(selectedIndex);
        addressForUpdate=selectedRequest.getNewAddress();
        orderid=selectedRequest.getOrderId();
        System.out.println(orderid);
        orderUpdate=new CustomerManager();
         orderUpdate.setAddress(addressForUpdate);
         orderUpdate.setOrderId(orderid);
        CustomerManagerDBC.updateAddress(orderUpdate);
        populateTable();
        //orderid
        //CustomerMaupdateAddress(orderUpdate);
        //database -> request table status update -> order table address change where orderid ==
        
    }//GEN-LAST:event_ApproveActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
     CustomerManager newOrderDetail = new CustomerManager();
        try{
           newOrderDetail.setAddress(addressForUpdate);
            //insert into db
            CustomerManagerDBC.updateRequest(selectedOrderDetails, newOrderDetail);
            JOptionPane.showMessageDialog(null,"User Updated Successfully","Successful Update",JOptionPane.INFORMATION_MESSAGE); 
            //clearFields();
            populateTable();
        } catch (Exception e) {
            JOptionPane. showMessageDialog(this,e.getMessage());
    }        // TODO add your handling code here:
    }//GEN-LAST:event_saveButtonActionPerformed

    private void requestTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTableButtonActionPerformed
                populateRequestTable();        // TODO add your handling code here:
    }//GEN-LAST:event_requestTableButtonActionPerformed

    private void OrderTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderTableActionPerformed
        // TODO add your handling code here:
        populateTable();
         int selectedIndex = order_table.getSelectedRow();
        if(selectedIndex == -1) {
            JOptionPane.showMessageDialog(this,"Please select an order to update", "Cannot update order", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        selectedOrderDetails = orderlist.get(selectedIndex);
        
    }//GEN-LAST:event_OrderTableActionPerformed

 public void populateTable() {
        try {
            this.orderlist = CustomerManagerDBC.getAllOrders();
            DefaultTableModel model = (DefaultTableModel) order_table.getModel();
            model.setRowCount(0);
            for (CustomerManager Order :orderlist ) {
               Object[] row = new Object[9];
                row[0] =Order.getOrderId();
                row[1]=Order.getCreatorId();
                row[2]=Order.getProdName();
                row[3]=Order.getAddress();
                row[4]=Order.getDate();
                row[5]=Order.getAgentId();
                row[6]=Order.getStatus();
                row[7]=Order.getNotes();
                
                        
                model.addRow(row);
            }
            //clearFields();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,e.getMessage());
            }
    }
 
 public void populateRequestTable(){
      try {
            this.requestlist = CustomerManagerDBC.getAllRequests();
            DefaultTableModel model = (DefaultTableModel) requests_table.getModel();
            model.setRowCount(0);
            for (CustomerManager request :requestlist) {
               Object[] row = new Object[9];
                row[0] =request.getOrderId();
                row[1]=request.getAddress();
                row[2]=request.getNewAddress();
                row[3]=request.getComments();      
                model.addRow(row);
            }
            //clearFields();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,e.getMessage());
            }
 }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Approve;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane orderTable;
    private javax.swing.JScrollPane orderTable1;
    private javax.swing.JButton orderTableButton;
    private javax.swing.JTable order_table;
    private javax.swing.JButton requestCancellation;
    private javax.swing.JScrollPane requestTable;
    private javax.swing.JButton requestTableButton;
    private javax.swing.JTable requests_table;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
